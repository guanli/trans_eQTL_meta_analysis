#!/usr/bin/env snakemake

"""
Snakemake PEER pipeline
=======================

Snakemake pipeline for optimizing PEER facotrs in trans-eQTL study.
  step1: check if any particular PEER factor is under genetic control
  step2: see the number of PEER factor that maximize cis-eGene or trans-eGene discovery
"""

from snakemake.exceptions import WorkflowError
configfile: "peer_opt_trans.json" #you have to modify the confile cp-ed into each peer factor as well

#this snakefile is supposed to be run in ~/muscle_trans_snk/peer_all_gene/trans_opt
#original file
#genotype is ~/muscle_trans_snk/data/genotypes.vcf.gz; peer_gwas used all snps but in peer_opt a LD pruned list of SNPs is used
#original gene file is data/moltraits_trans.bed.gz, some rules can turn it into QTLtools required format
#cov file starts with ~/muscle_trans_snk/data/covariates.txt.gz, some rules will merge peer factors in
#make sure all three files have same sample name; I think QTLtools can handel samples in different order, but have
#always give samples in same order so far

rule final:
    input:
        #gwas results of each PEER factor
        #'mkdir.OK',
        #peer_gwas_res
        #expand('peer_gwas/factor_{k}_gwas_fdr_{peer_gwas_fdr}.tab.gz',
        #       k=range(1, config['PEER_FACTORS_GWAS']+1),
         #      peer_gwas_fdr=config['PEER_GWAS_FDR']),
        #cis nominal pass
            #snp-gene pair
        'peer_factors-qtltools_nominal-summary.tsv.gz',
        'peer_factors-qtltools_nominal-summary.pdf',
            #eGene
        'eGene_cis_peer_factors-qtltools_nominal-summary.tsv.gz',
        'eGene_cis_peer_factors-qtltools_nominal-summary.pdf',
    
        #trans nominal pass
            #snp-gene pair
        'trans_peer_factors-qtltools_nominal-summary.tsv.gz',
        'trans_peer_factors-qtltools_nominal-summary.pdf',
            #eGene
        'trans_eGene_peer_factors-qtltools_nominal-summary.tsv.gz',
        'trans_eGene_peer_factors-qtltools_nominal-summary.pdf'
        
        #expand('../peer_runs/factor_{k_opt}/trans_qtltools_nominal.tsv.gz',k_opt=config['PEER_FACTORS_OPT'])
        # OPTIONAL cleanup
        # After running everything, you may want to clean logs 
        # and singularity images
        #qtltools__in_subdir_clean_logs
        #qtltools__in_subdir_clean_singularity

# PEER correlation with known covariates #########################################################################
# Correlation between PEER and covariates; fill in later

# PEER under genetic conrol#########################################################################
# Use each PEER factor ~ known covariate + snp dosage to see if some particular PEER factors are under genetic control
rule mkdir:
    output:
      'mkdir.OK'
    shell:
      'mkdir peer_gwas; '
      'touch mkdir.OK'
      
rule ped_for_EPACTS:
    """
      Prepare ped files for EPACT
      should be sth like FAM_ID IND_ID FAT_ID MOT_ID PEER factor ... Each known factor
    """
    input:
      known_factor = '../../data/covariates.txt.gz',
      peer_factor = expand('../peer_runs/factor_{n_gwas_peer}/moltraits-peer_factors.tsv.gz', n_gwas_peer=config['N_GWAS_PEER'])
    output:
      expand('data/{outpfx}_old.ped', outpfx=config['PRX_PED_EPACTS'])
    params:
      r_script=srcdir('scripts/prep_ped_epacts.R'),
      outpfx=config['PRX_PED_EPACTS']
    shell:
      'Rscript {params.r_script} -p {input.peer_factor} -f {input.known_factor} -o data/{params.outpfx}_old'  

rule change_ped_header:
    input:
      rules.ped_for_EPACTS.output
    output:
      expand('data/{outpfx}.ped', outpfx=config['PRX_PED_EPACTS'])
    shell:
      'sed \'1 s/FAM_ID/#FAM_ID/\' {input} > {output};'
      'rm {input}'
      
rule tabix_vcf:
    """
      EPACT requires that the vcf file to be tabix
    """
    input:
      '../../data/genotypes.vcf.gz'
    output:
      '../../data/genotypes.vcf.gz.tbi'
    shell:
      'tabix -p vcf {input}'
      
rule EPACTS_peer_gwas:
    """
    EPACTS q.lm was used to perform linear model PEER factor ~ known covariate + snp dosage
    """
    input:
      vcf = '../../data/genotypes.vcf.gz',
      vcf_tbi = '../../data/genotypes.vcf.gz.tbi',
      ped = rules.change_ped_header.output
    output:
      gwas = 'peer_gwas/factor_{k}.epacts.gz',
      gwas_tbi = 'peer_gwas/factor_{k}.epacts.gz.tbi',
      mh = 'peer_gwas/factor_{k}.epacts.mh.pdf',
      qq = 'peer_gwas/factor_{k}.epacts.qq.pdf'
    params:
        PARAM=config['PARAM_EPACTS_COV'],
    shell:
      '/net/fantasia/home/hmkang/bin/epactsRelease/bin/epacts single '
      '--vcf {input.vcf} --ped {input.ped} --pheno factor_{wildcards.k} '
      '{params.PARAM} --test q.linear --out peer_gwas/factor_{wildcards.k} --run 1'

rule peer_gwas_fdr:
    """
    see if any varaints have p values passing FDR 10% with a certain PEER factor
    """
    input:
        #expand('peer_gwas/factor_{k}.epacts.gz', k=range(1, config['PEER_FACTORS_GWAS']+1))
        'peer_gwas/factor_{k}.epacts.gz'
    output:
        #expand('peer_gwas/factor_{k}_gwas_fdr_{peer_gwas_fdr}.tab.gz', k=range(1, config['PEER_FACTORS_GWAS']+1), peer_gwas_fdr=config['PEER_GWAS_FDR'])
        'peer_gwas/factor_{k}_gwas_fdr_{peer_gwas_fdr}.tab.gz'
    params:
        r_script=srcdir('scripts/peer_gwas_fdr.R'),
        peer_gwas_p_col=config['PEER_GWAS_P_COL'],
        peer_gwas_fdr = config['PEER_GWAS_FDR']
    shell:
        'Rscript {params.r_script} -i {input} -p {params.peer_gwas_p_col} -f {params.peer_gwas_fdr}'

# Running eQTL mapping for each number of PEER factors prep ###############################################################
rule mkdir_2:
    output:
     '../peer_runs/factor_{k_opt}/mkdir.OK'
    shell:
      'mkdir -p ../peer_runs/factor_{wildcards.k_opt}/data/; '
      'touch ../peer_runs/factor_{wildcards.k_opt}/mkdir.OK'

rule ld_prune:
  input:
    expand('../peer_runs/factor_{k_opt}/mkdir.OK',k_opt=config['PEER_FACTORS_OPT']),
    vcf = rules.tabix_vcf.input
  output:
    prune_in = 'data/ld_prune.prune.in',
    prune_out = 'data/ld_prune.prune.out',
    prune_nosex = 'data/ld_prune.nosex',
    prune_log = 'data/ld_prune.log'
  params:
    plink_ld_prune=config['PLINK_LD_PRUNE']
  shell:
    'plink-1.9 --vcf {input.vcf} --keep-allele-order --indep-pairwise {params.plink_ld_prune} --out data/ld_prune'
 
rule tabix_ld_prune:
  input:
    snps = rules.ld_prune.output.prune_in,
    vcf = rules.ld_prune.input.vcf
  output:
    vcf = 'data/genotypes.vcf.gz',
    tbi = 'data/genotypes.vcf.gz.tbi'
  params:
    plink_ld_prune=config['PLINK_LD_PRUNE'],
  shell:
    'vcftools --gzvcf {input.vcf} --snps {input.snps} --recode --stdout | vcf-sort | bgzip -c > {output.vcf}; '
    'tabix -p vcf {output.vcf}'
    
rule qtltools__prep_vcf:
    """
    Symlink vcf file in each PEER factor directory. 
    
    Input:
        data/genotypes.vcf.gz = expected to be provided by use
        data/genotypes.vcf.gz.tbi = can be generated using qtltools_prep__vcf 
            method from ../qtl/Snakefile
    """
    input:
        vcf = rules.tabix_ld_prune.output.vcf,
        tbi = rules.tabix_ld_prune.output.tbi
    output:
        '../peer_runs/factor_{k_opt}/data/genotypes.vcf.gz',
        '../peer_runs/factor_{k_opt}/data/genotypes.vcf.gz.tbi'
    shell:
        'for i in {input}; do '
            'out_i=`basename $i`; '
            'in_i=$( scripts/realpath $i ); '
            'ln -s $in_i ../peer_runs/factor_{wildcards.k_opt}/data/$out_i; '
        'done'

rule prep_moltraits:
    input:
      'data/moltraits_trans.bed.gz'
    output:
      'data/moltraits_trans_qtltools.bed.gz'
    params:
      r_script= '~/muscle_trans_snk/scripts/prep_qtltools_pheno_bed.R', #should add inv_norm function to it
      awksort= '~/muscle_trans_snk/scripts/general-sort_bed_with_header.awk',
      anno = '~/muscle_trans_snk/scripts/pos_strand.tab.gz',
      start_col = config['INPUT_PREP_PHENO_QTLTOOLS_START_COL']
    shell:
       #merge gene:chr,start,end to make it an input file for QTLtools
      'Rscript {params.r_script} -i {input} -a {params.anno} -c {params.start_col} -f gene -n TRUE -o data/moltraits_trans_qtltools_unsort; '
       #sort chr and start
      'gunzip -c data/moltraits_trans_qtltools_unsort.bed.gz | {params.awksort} | bgzip -c > {output} ; '
       #rm intermediate file
      'rm data/moltraits_trans_qtltools_unsort.bed.gz '
      
rule tabix_moltraits:
    """
      tabix moltraits_trans_qtltools.tab.gz before giving to QTLtools
    """
    input:
      rules.prep_moltraits.output
    output:
      'data/moltraits_trans_qtltools.bed.gz.tbi'
    shell:
      'tabix {input}'

rule qtltools__prep_moltraits:
    """
    Symlink bed file in each PEER factor directory. This file will serve as 
    the y variable for QTL mapping.
    """
    input:
        peer_input = rules.tabix_moltraits.input,
        tbi = rules.tabix_moltraits.output
        #resid='peer_runs/factor_{k_opt}/moltraits-peer_residuals.bed.gz',
        #resid_nrm='peer_runs/factor_{k_opt}/moltraits-peer_residuals-invnorm.bed.gz'
    output:
        cis_y = '../peer_runs/factor_{k_opt}/data/moltraits.bed.gz',
        cis_y_tbi = '../peer_runs/factor_{k_opt}/data/moltraits.bed.gz.tbi',
        trans_y = '../peer_runs/factor_{k_opt}/data/moltraits_trans_qtltools.bed.gz',
        trans_y_tbi = '../peer_runs/factor_{k_opt}/data/moltraits_trans_qtltools.bed.gz.tbi'
    params:
        y_file=config['PARAM_QTLTOOLS_Y']
    run:
        if params.y_file == 'peer_input':
            shell('ln -s $( scripts/realpath {input.peer_input} ) {output.cis_y};'
                  'ln -s $( scripts/realpath {input.tbi} ) {output.cis_y_tbi};'
                  'ln -s $( scripts/realpath {input.peer_input} ) {output.trans_y};'
                  'ln -s $( scripts/realpath {input.tbi} ) {output.trans_y_tbi};')
        elif params.y_file == 'peer_resid':
            shell('ln -s $( scripts/realpath {input.resid} ) {output}')
        elif params.y_file == 'peer_resid_norm':
            shell('ln -s $( scripts/realpath {input.resid_nrm} ) {output}')
        else:
            raise WorkflowError('Invalid PARAM_QTLTOOLS_Y value: %s.' % 
                (params.y_file))

rule qtltools__prep_covs:
    """
    Set up potential covariates for QTLtools.
    
    Writes peer_runs/factor_{k}/data/covariates.*.gz.
    Note covariates.tsv.gz needs to be space separated (txt.gz) I found this not ture, tab deliminated is fine.
    
    if PARAM_PEER_QTLTOOLS_BASE_COVAR == '': 
        peer_runs/factor_{k}/data/covariates.*.gz will contain PEER factors
    else:
        peer_runs/factor_{k}/data/covariates.*.gz will contain PEER factors
        rbound with the specified tsv.gz matrix file.
    """
    input:
        '../peer_runs/factor_{k_opt}/moltraits-peer_factors.tsv.gz'
    output:
        '../peer_runs/factor_{k_opt}/data/covariates.txt.gz'
    params:
        script_rbind='~/muscle_trans_snk/scripts/general-matrix_rbind.py',
        base_covariates_file=config['PARAM_PEER_QTLTOOLS_BASE_COVAR']
    run:
        out_txt = '../peer_runs/factor_{wildcards.k_opt}/data/covariates.txt.gz'
        if any({params.base_covariates_file}):
            cmd = 'python {params.script_rbind} '
            cmd = '%s {params.base_covariates_file}' % cmd 
            cmd = '%s --add_mtx {input} ' % cmd 
            cmd = '%s --drop_variate factor_34 factor_35 factor_54 --out_file \
                ../peer_runs/factor_{wildcards.k_opt}/data/covariates' % cmd 
        else:
            cmd = 'ln -s $( scripts/realpath {input} ) %s' % out_txt
        shell(cmd)
                
rule qtltools__prep_analysis_config:
    """
    Copy analysis config file in each PEER factor directory
    """
    input:
        'peer_opt_trans.json'
    output:
        '../peer_runs/factor_{k_opt}/peer_opt_trans.json'
    shell:
        'cp {input} {output}'

rule qtltools__in_subdir_clean_logs:
    """
    Clears logs for each PEER factor iteration
    """
    shell:
        'rm -r ../peer_runs/factor_*/logs/'
        
#rule qtltools__in_subdir_clean_singularity:
#    """
#    Clears Singularity images for each PEER factor iteration
#    """
#    shell:
#        'rm -r peer_runs/factor_*/.snakemake/singularity'
################################################################################

# QTLtools: cis nominal ############################################################
rule qtltools__nominal_in_subdir:
    """
    Run QTLtools from within each PEER factor directory by cd into the PEER
    factor directory, loading the QTLtools Snakemake file, and calling the
    qtltools_proximal__nominal_concat function within the Snakemake file (which 
    generates the qtltools_nominal.tsv.gz output file).
    """
    input:
        geno='../peer_runs/factor_{k_opt}/data/genotypes.vcf.gz',
        pheno='../peer_runs/factor_{k_opt}/data/moltraits.bed.gz',
        cov='../peer_runs/factor_{k_opt}/data/covariates.txt.gz',
        config_analysis='../peer_runs/factor_{k_opt}/peer_opt_trans.json'
        #config_cluster='peer_runs/factor_{k_opt}/config_cluster.json'
    output:
        '../peer_runs/factor_{k_opt}/qtltools_nominal.tsv.gz'
    params:
        script_snakefile='~/muscle_trans_snk/eQTL/cis/Snakefile'
        #script_cluster_submit=srcdir('../wrappers/cluster/lsf.py')
    run:
        cmd = 'cd ../peer_runs/factor_{wildcards.k_opt}; '
        cmd = '%s config_analysis=`basename {input.config_analysis}`; ' % cmd
        #if config['PARAM_QTLTOOLS_SWARM']:
        #    cmd = '%s config_cluster=`basename {input.config_cluster}`; ' % cmd
        
        cmd = '%s snakemake qtltools_proximal__nominal_concat  ' % cmd
        cmd = '%s --snakefile {params.script_snakefile}  ' % cmd
        cmd = '%s --configfile $config_analysis --printshellcmds ' % cmd
        shell(cmd)

rule qtltools__sum_nominal_in_subdir:
    """
    Summarize the total number of nominally significant QTLs. 
    
    Note: not corrected for number of tests.
    """
    input:
        '../peer_runs/factor_{k_opt}/qtltools_nominal.tsv.gz'
    output:
        '../peer_runs/factor_{k_opt}/qtltools_nominal-summary.tsv'
    shell:
        # count the number of hits at an pv <= 0.05 and 0.01. 
        # note from the QTLtools nominal output, column 12 == p_nominal
        'hits=`gunzip -c {input} | '
            'awk \'{{ if ($12<=0.05) print $1"\\t"$12}}\' | wc -l`; '
        'echo -e "{wildcards.k_opt}\t0.05\t$hits" > {output}; '
        'hits=`gunzip -c {input} | '
            'awk \'{{ if ($12<=0.01) print $1"\\t"$12}}\' | wc -l`; '
        'echo -e "{wildcards.k_opt}\t0.01\t$hits" >> {output}; '

rule qtltools__optimize_nominal:
    """
    Summarize the total number of nominally significant QTLs across all PEER 
    factor runs. 
    
    Note: not corrected for number of tests.
    """
    input:
        expand(
            '../peer_runs/factor_{k_opt}/qtltools_nominal-summary.tsv',
            k_opt=config['PEER_FACTORS_OPT']
        )
    output:
        out_file='peer_factors-qtltools_nominal-summary.tsv.gz', 
        out_plot='peer_factors-qtltools_nominal-summary.pdf'
##    singularity:
##        config['DOCKER']
    params:
        script_optimize=srcdir('scripts/peer-optimize_factors_qtltools.R')
    shell:
        # generate the output file
        'echo -e "peer_factors\tp_cut\tn" > {output.out_file}.tmp; '
        'cat {input} >> {output.out_file}.tmp; '
        'gzip -c {output.out_file}.tmp > {output.out_file}; '
        'rm {output.out_file}.tmp; '
        
        # plot the output file
        'Rscript {params.script_optimize} '
            '--file {output.out_file} '
            '--y_axis_label "Number of QTLs" '
            '--out_file `basename {output.out_plot} .pdf`; '
            
rule sum_diff_p_in_subdir_eGene_cis:
    """
    Summarize the total number of nominally significant QTLs. 
    
    Note: not corrected for number of tests.
    """
    input:
        '../peer_runs/factor_{k_opt}/qtltools_nominal.tsv.gz'
    output:
        '../peer_runs/factor_{k_opt}/cis_eGene_qtltools_nominal-summary.tsv'
    shell:
        # count the number of hits at an pv <= 0.05 and 0.01. 
        # note from the QTLtools nominal output, column 12 == p_nominal
        'hits=`gunzip -c {input} | '
            'awk \'{{ if ($12<=0.05) print $1}}\' | sort | uniq | wc -l`; '
        'echo -e "{wildcards.k_opt}\t0.05\t$hits" > {output}; '
        'hits=`gunzip -c {input} | '
            'awk \'{{ if ($12<=0.01) print $1}}\' | sort | uniq | wc -l`; '
        'echo -e "{wildcards.k_opt}\t0.01\t$hits" >> {output}; '

rule eGene_cis_optimize_nominal:
    """
    Summarize the total number of nominally significant QTLs across all PEER 
    factor runs. 
    
    Note: not corrected for number of tests.
    """
    input:
        expand(
            '../peer_runs/factor_{k_opt}/cis_eGene_qtltools_nominal-summary.tsv',
            k_opt=config['PEER_FACTORS_OPT']
        )
    output:
        out_file='eGene_cis_peer_factors-qtltools_nominal-summary.tsv.gz', 
        out_plot='eGene_cis_peer_factors-qtltools_nominal-summary.pdf'
##    singularity:
##        config['DOCKER']
    params:
        script_optimize=srcdir('scripts/peer-optimize_factors_qtltools.R')
    shell:
        # generate the output file
        'echo -e "peer_factors\tp_cut\tn" > {output.out_file}.tmp; '
        'cat {input} >> {output.out_file}.tmp; '
        'gzip -c {output.out_file}.tmp > {output.out_file}; '
        'rm {output.out_file}.tmp; '
        
        # plot the output file
        'Rscript {params.script_optimize} '
            '--file {output.out_file} '
            '--y_axis_label "Number of QTLs" '
            '--out_file `basename {output.out_plot} .pdf`; '

################################################################################

# QTLtools: trans nominal ############################################################
rule qtltools__nominal_in_subdir_trans:
    """
    Run QTLtools from within each PEER factor directory by cd into the PEER
    factor directory, loading the QTLtools Snakemake file, and calling the
    qtltools_proximal__nominal_concat function within the Snakemake file (which 
    generates the qtltools_nominal.tsv.gz output file).
    """
    input:
        geno='../peer_runs/factor_{k_opt}/data/genotypes.vcf.gz',
        pheno='../peer_runs/factor_{k_opt}/data/moltraits_trans_qtltools.bed.gz',
        cov='../peer_runs/factor_{k_opt}/data/covariates.txt.gz',
        config_analysis='../peer_runs/factor_{k_opt}/peer_opt_trans.json'
        #config_cluster='peer_runs/factor_{k}/config_cluster.json'
    output:
        '../peer_runs/factor_{k_opt}/trans_qtltools_nominal.tsv.gz'
    params:
        script_snakefile='~/muscle_trans_snk/eQTL/trans/Snakefile'
        #script_cluster_submit=srcdir('../wrappers/cluster/lsf.py')
    run:
        cmd = 'cd ../peer_runs/factor_{wildcards.k_opt}; '
        cmd = '%s config_analysis=`basename {input.config_analysis}`; ' % cmd
        #if config['PARAM_QTLTOOLS_SWARM']:
        #    cmd = '%s config_cluster=`basename {input.config_cluster}`; ' % cmd
        
        cmd = '%s snakemake qtltools_proximal__nominal_concat  ' % cmd
        cmd = '%s --snakefile {params.script_snakefile}  ' % cmd
        cmd = '%s --configfile $config_analysis --printshellcmds ' % cmd        
        shell(cmd)
        
rule qtltools__sum_diff_p_in_subdir_trans:
    """
    Summarize the total number of nominally significant QTLs. 
    
    Note: not corrected for number of tests.
    """
    input:
        '../peer_runs/factor_{k_opt}/trans_qtltools_nominal.tsv.gz'
    output:
        '../peer_runs/factor_{k_opt}/trans_qtltools_nominal-summary.tsv'
    shell:
        # count the number of hits at an pv <= 0.05 and 0.01. 
        # note from the QTLtools nominal output, column 12 == p_nominal
        'hits=`gunzip -c {input} | '
            'awk \'{{ if ($7<=1e-7) print $1"\\t"$7}}\' | wc -l`; '
        'echo -e "{wildcards.k_opt}\t1e-7\t$hits" > {output}; '
        'hits=`gunzip -c {input} | '
            'awk \'{{ if ($7<=1e-8) print $1"\\t"$7}}\' | wc -l`; '
        'echo -e "{wildcards.k_opt}\t1e-8\t$hits" >> {output}; '
        'hits=`gunzip -c {input} | '
            'awk \'{{ if ($7<=1e-9) print $1"\\t"$7}}\' | wc -l`; '
        'echo -e "{wildcards.k_opt}\t1e-9\t$hits" >> {output}; '
        'hits=`gunzip -c {input} | '
            'awk \'{{ if ($7<=1e-10) print $1"\\t"$7}}\' | wc -l`; '
        'echo -e "{wildcards.k_opt}\t1e-10\t$hits" >> {output}; '
        'hits=`gunzip -c {input} | '
            'awk \'{{ if ($7<=1e-11) print $1"\\t"$7}}\' | wc -l`; '
        'echo -e "{wildcards.k_opt}\t1e-11\t$hits" >> {output}; '
        'hits=`gunzip -c {input} | '
            'awk \'{{ if ($7<=1e-12) print $1"\\t"$7}}\' | wc -l`; '
        'echo -e "{wildcards.k_opt}\t1e-12\t$hits" >> {output}; '

rule qtltools__optimize_nominal_trans:
    """
    Summarize the total number of nominally significant QTLs across all PEER 
    factor runs. 
    
    Note: not corrected for number of tests.
    """
    input:
        expand(
            '../peer_runs/factor_{k_opt}/trans_qtltools_nominal-summary.tsv',
            k_opt=config['PEER_FACTORS_OPT']
        )
    output:
        out_file='trans_peer_factors-qtltools_nominal-summary.tsv.gz', 
        out_plot='trans_peer_factors-qtltools_nominal-summary.pdf'
##    singularity:
##        config['DOCKER']
    params:
        script_optimize=srcdir('scripts/peer-optimize_factors_qtltools.R')
    shell:
        # generate the output file
        'echo -e "peer_factors\tp_cut\tn" > {output.out_file}.tmp; '
        'cat {input} >> {output.out_file}.tmp; '
        'gzip -c {output.out_file}.tmp > {output.out_file}; '
        'rm {output.out_file}.tmp; '
        
        # plot the output file
        'Rscript {params.script_optimize} '
            '--file {output.out_file} '
            '--y_axis_label "Number of QTLs" '
            '--out_file `basename {output.out_plot} .pdf`; '

        
rule sum_diff_p_in_subdir_eGene_paris_trans:
    """
    Summarize the total number of trans-eGene (unique genes) by differeny p value cut-offs. 
    Note: not corrected for number of tests.
    """
    input:
        '../peer_runs/factor_{k_opt}/trans_qtltools_nominal.tsv.gz'
    output:
        '../peer_runs/factor_{k_opt}/trans_eGene_qtltools_nominal-summary.tsv'
    shell:
        # count the number of hits at an pv <= 0.05 and 0.01. 
        # note from the QTLtools nominal output, column 12 == p_nominal
        'hits=`gunzip -c {input} | '
            'awk \'{{ if ($7<=1e-7) print $1}}\' | sort | uniq | wc -l`; '
        'echo -e "{wildcards.k_opt}\t1e-7\t$hits" > {output}; '
        'hits=`gunzip -c {input} | '
            'awk \'{{ if ($7<=1e-8) print $1}}\' | sort | uniq | wc -l`; '
        'echo -e "{wildcards.k_opt}\t1e-8\t$hits" >> {output}; '
        'hits=`gunzip -c {input} | '
            'awk \'{{ if ($7<=1e-9) print $1}}\' | sort | uniq | wc -l`; '
        'echo -e "{wildcards.k_opt}\t1e-9\t$hits" >> {output}; '
        'hits=`gunzip -c {input} | '
            'awk \'{{ if ($7<=1e-10) print $1}}\' | sort | uniq | wc -l`; '
        'echo -e "{wildcards.k_opt}\t1e-10\t$hits" >> {output}; '
        'hits=`gunzip -c {input} | '
            'awk \'{{ if ($7<=1e-11) print $1}}\' | sort | uniq | wc -l`; '
        'echo -e "{wildcards.k_opt}\t1e-11\t$hits" >> {output}; '
        'hits=`gunzip -c {input} | '
            'awk \'{{ if ($7<=1e-12) print $1}}\' | sort | uniq | wc -l`; '
        'echo -e "{wildcards.k_opt}\t1e-12\t$hits" >> {output}; '
        
rule eGene_trans_optimize_nominal_trans:
    """
    Summarize the total number of nominally significant QTLs across all PEER 
    factor runs. 
    
    Note: not corrected for number of tests.
    """
    input:
        expand(
            '../peer_runs/factor_{k_opt}/trans_eGene_qtltools_nominal-summary.tsv',
            k_opt=config['PEER_FACTORS_OPT']
        )
    output:
        out_file='trans_eGene_peer_factors-qtltools_nominal-summary.tsv.gz', 
        out_plot='trans_eGene_peer_factors-qtltools_nominal-summary.pdf'
##    singularity:
##        config['DOCKER']
    params:
        script_optimize=srcdir('scripts/peer-optimize_factors_qtltools.R')
    shell:
        # generate the output file
        'echo -e "peer_factors\tp_cut\tn" > {output.out_file}.tmp; '
        'cat {input} >> {output.out_file}.tmp; '
        'gzip -c {output.out_file}.tmp > {output.out_file}; '
        'rm {output.out_file}.tmp; '
        
        # plot the output file
        'Rscript {params.script_optimize} '
            '--file {output.out_file} '
            '--y_axis_label "Number of QTLs" '
            '--out_file `basename {output.out_plot} .pdf`; '
        
################################################################################
